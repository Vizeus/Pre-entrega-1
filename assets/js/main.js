// Saludo inicial al usuario
alert("¬°Hola! Bienvenido al robot cocinero ü§ñ üë®‚Äçüç≥");

// Confirmaci√≥n del deseo del usuario de que el robot cocine por √©l
const deseoDelUsuario = confirm("¬øDesea que cocine por usted? ü§î");

// Manejo de la respuesta del usuario
if (!deseoDelUsuario) {
    // Si el usuario no desea que cocine, se despide y recarga la p√°gina
    alert("Ha sido un placer hablar con usted. Saludos üëã");
    location.reload(); // Recargar la p√°gina si el usuario cancela (esto no s√© porqu√© no esta funcionando, si lo pongo solo funciona)
} else {
    // Si el usuario desea que cocine, se informa que comienza el proceso de cocina
    alert("Comienza el proceso de cocina");
}

// Lista de v√≠veres disponibles para cocinar
const listaDeComida = [
    "aceite", "ar√°ndanos", "at√∫n", "az√∫car", "banana", "cebolla", "dulce de leche", "espinaca", "galletitas 'Chocolinas'",
    "harina", "huevo", "leche", "lechuga", "manteca", "masa de tarta", "papa", "pechuga de pollo", "queso crema", "sal", "tomate"
];

// Confirmaci√≥n del usuario para revisar la lista de v√≠veres disponibles
const autorizacionDelUsuario = confirm("¬øMe permite revisar la lista de v√≠veres disponibles? ü§î");

// Manejo de la respuesta del usuario
if (!autorizacionDelUsuario) {
    // Si el usuario no autoriza, se despide y recarga la p√°gina
    alert("No puedo seguir con mi proceso de cocina sino reviso la lista de v√≠veres disponibles. Ha sido un placer hablar con usted. Saludos üëã");
    location.reload(); // Recargar la p√°gina si el usuario cancela (esto no s√© porqu√© no esta funcionando, si lo pongo solo funciona)
} else {
    // Si el usuario autoriza, se muestra la lista de ingredientes disponibles
    alert("Vamos a revisar la lista de ingredientes disponibles üìù");
    let mensajeViveres = construirMensajeViveres(listaDeComida); // Llama a la funci√≥n para construir el mensaje de v√≠veres
    alert(mensajeViveres); // Muestra el mensaje con los v√≠veres disponibles
}

let respuesta;
let nuevasCompras = [];

do {
    // Pregunta al usuario sobre nuevas compras
    respuesta = prompt("¬øHa hecho alguna compra que desee notificar? Si no compr√≥ nada simplemente escriba 'no'. Si compr√≥ algo, escriba el nombre del producto y para finalizar las adiciones, escriba 'fin'.").trim().toLowerCase();

    if (respuesta !== "fin" && respuesta !== "no") {
        // Si la respuesta no es 'fin' ni 'no', verifica si el producto ya est√° en la lista de v√≠veres disponibles
        let verificadorDeVivereExistente = listaDeComida.indexOf(respuesta);
        if (verificadorDeVivereExistente === -1) {
            // Si el producto no est√° en la lista, lo agrega a nuevasCompras
            nuevasCompras.push(respuesta);
        }
    } else if (respuesta === "fin") {
        // Si la respuesta es 'fin', indica que se ha finalizado la lista de compras
        alert("Ha finalizado la lista de compras.");
    }

} while (respuesta !== "fin" && respuesta !== "no");

if (nuevasCompras.length > 0) {
    // Si se han agregado nuevas compras, se muestra la lista de compras agregadas
    alert("Se han agregado las siguientes compras a la lista:");
    alert(nuevasCompras.join(", ")); // Muestra las nuevas compras separadas por coma

    // Actualiza la lista de v√≠veres disponibles con las nuevas compras y las ordena alfab√©ticamente
    const listaDeComidaActualizada = listaDeComida.concat(nuevasCompras).sort();

    // Construye el mensaje actualizado de v√≠veres disponibles
    let mensajeViveresActualizados = construirMensajeViveres(listaDeComidaActualizada);
    alert(mensajeViveresActualizados); // Muestra el mensaje actualizado con los v√≠veres disponibles
} else {
    // Si no se han agregado nuevas compras, informa que no se han realizado adiciones
    alert("No se han agregado nuevas compras.");
}

alert("Ahora, ¬°a cocinar! üç≥ ¬øQu√© quiere que le cocine? ü§î");

let eleccionDeComida;

// Ciclo para preguntar al usuario si prefiere algo dulce o salado
while (eleccionDeComida !== "dulce" && eleccionDeComida !== "salado") {
    eleccionDeComida = prompt("¬øPrefiere algo dulce o salado?").trim().toLowerCase();
    if (eleccionDeComida === "dulce") {
        // Si elige dulce, muestra las opciones de comidas dulces disponibles
        alert("¬°Perfecto! Voy a cocinar algo dulce üç∞");
        alert("Seg√∫n mis c√°lculos y sus preferencias, dados los v√≠veres disponibles, le puedo cocinar un Bud√≠n de Banana con Ar√°ndanos, una Chocotorta o unos Panqueques con Dulce de Leche");
        let eleccionDeComidaEspecifica;
        while (true) {
            // Pregunta espec√≠fica para elegir la comida dulce deseada
            eleccionDeComidaEspecifica = prompt("Escriba 1 + 'enter' para seleccionar el Bud√≠n de Banana con Ar√°ndanos \nEscriba 2 + 'enter' para seleccionar la Chocotorta \nEscriba 3 + 'enter' para seleccionar los Panqueques con Dulce de Leche").trim();
            switch (parseInt(eleccionDeComidaEspecifica)) {
                case 1:
                    // Preparar Bud√≠n de Banana con Ar√°ndanos
                    alert("Cocinando... üç≥");
                    alert("¬°Bud√≠n de Banana con Ar√°ndanos üçåüçû preparado! üçΩÔ∏è ¬°Que lo disfrutes! üòÑüë®‚Äçüç≥");
                    break;
                case 2:
                    // Preparar Chocotorta
                    alert("Cocinando... üç≥");
                    alert("¬°Chocotorta üç´üç∞ preparada! üçΩÔ∏è ¬°Que la disfrutes! üòÑüë®‚Äçüç≥");
                    break;
                case 3:
                    // Preparar Panqueques con Dulce de Leche
                    alert("Cocinando... üç≥");
                    alert("Panqueques con Dulce de Leche ü•û preparados! üçΩÔ∏è ¬°Que los disfrutes! üòÑüë®‚Äçüç≥");
                    break;
                default:
                    // Mensaje por opci√≥n inv√°lida en comida dulce
                    alert("Opci√≥n no v√°lida ‚ùå Por favor, escribe una opci√≥n v√°lida del 1 al 3 ‚úç");
                    continue; // Volver a pedir la opci√≥n
            }
            break; // Salir del bucle while interno cuando se seleccione una opci√≥n v√°lida
        }
    } else if (eleccionDeComida === "salado") {
        // Si elige salado, muestra las opciones de comidas saladas disponibles
        alert("¬°Perfecto! Voy a cocinar algo salado üçï");
        alert("Seg√∫n mis c√°lculos y sus preferencias, dados los v√≠veres disponibles, le puedo preparar una Ensalada de Tomate, At√∫n, Lechuga y Cebolla, una Pechuga de Pollo con Pur√© de Papas o una Tarta de Espinaca");
        let eleccionDeComidaEspecifica;
        while (true) {
            // Pregunta espec√≠fica para elegir la comida salada deseada
            eleccionDeComidaEspecifica = prompt("Escriba 1 + 'enter' para seleccionar la Ensalada de Tomate, At√∫n, Lechuga y Cebolla \nEscriba 2 + 'enter' para seleccionar la Pechuga de Pollo con Pur√© de Papas \nEscriba 3 + 'enter' para seleccionar la Tarta de Espinaca").trim();
            switch (parseInt(eleccionDeComidaEspecifica)) {
                case 1:
                    // Preparar Ensalada de Tomate, At√∫n, Lechuga y Cebolla
                    alert("Cocinando... üç≥");
                    alert("Ensalada de Tomate, At√∫n, Lechuga y Cebolla ü•óüçÖüêü preparada! üçΩÔ∏è ¬°Que la disfrutes! üòÑüë®‚Äçüç≥");
                    break;
                case 2:
                    // Preparar Pechuga de Pollo con Pur√© de Papas
                    alert("Cocinando... üç≥");
                    alert("Pechuga de Pollo con Pur√© de Papas üçóü•î preparada! üçΩÔ∏è ¬°Que la disfrutes! üòÑüë®‚Äçüç≥");
                    break;
                case 3:
                    // Preparar Tarta de Espinaca
                    alert("Cocinando... üç≥");
                    alert("Tarta de Espinaca ü•ßüåø preparada! üçΩÔ∏è ¬°Que la disfrutes! üòÑüë®‚Äçüç≥");
                    break;
                default:
                    // Mensaje por opci√≥n inv√°lida en comida salada
                    alert("Opci√≥n no v√°lida ‚ùå Por favor, escribe una opci√≥n v√°lida del 1 al 3 ‚úç");
                    continue; // Volver a pedir la opci√≥n
            }
            break; // Salir del bucle while interno cuando se seleccione una opci√≥n v√°lida
        }
    } else {
        // Mensaje por entrada no v√°lida (ni dulce ni salado)
        alert("Entrada no v√°lida ‚ùå Por favor, escriba 'dulce' o 'salado' ‚úç");
    }
}

// ------------------------------------------------------------------------------------------------------

// Funci√≥n para construir el mensaje de v√≠veres disponibles
function construirMensajeViveres(lista) {
    let mensaje = "V√≠veres disponibles:\n";

    // Itera sobre la lista de v√≠veres para construir el mensaje enumerado
    lista.forEach((vivere, index) => {
        mensaje += `${index + 1}. ${vivere}\n`; // Agrega cada √≠tem con su n√∫mero de √≠ndice
    });
    
    return mensaje; // Retorna el mensaje completo con los v√≠veres disponibles
}
